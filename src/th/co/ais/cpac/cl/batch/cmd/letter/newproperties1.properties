/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package th.co.ais.cpac.cl.batch.cmd.letter;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import th.co.ais.cpac.cl.batch.Constants;
import th.co.ais.cpac.cl.batch.db.CLAction;
import th.co.ais.cpac.cl.batch.db.CLBatch;
import th.co.ais.cpac.cl.batch.db.CLCriteriaTemplate;
import th.co.ais.cpac.cl.batch.db.CLLanguage;
import th.co.ais.cpac.cl.batch.db.CLLetterTreatment;
import th.co.ais.cpac.cl.batch.db.CLTempTreatment;
import th.co.ais.cpac.cl.batch.db.PMCompany;
import th.co.ais.cpac.cl.batch.template.TreatmentTemplate;

/**
 *
 * @author Optimus
 */
public class LetterTreatment0 extends TreatmentTemplate {

  private static final BigDecimal batch_type_letter = new BigDecimal("10000000000000001");
  private static final BigDecimal batch_type_letter_email = new BigDecimal("10000000000000002");

  private BigDecimal batchSmsId;
  private BigDecimal batchEmailId;

  public LetterTreatment0(String[] args) {
    super(args);
  }

  @Override
  protected String getPathDatabase() {
    return "D:\\Work\\Ais\\Apps\\Batch\\configuration\\database.properties";
  }

  @Override
  protected String getTreatmentName() {
    return "LETTER";
  }

  @Override
  protected boolean business() {

    //<editor-fold defaultstate="collapsed" desc="get Batch Info">
    CLBatch.CLBatchVersionInfo batchIdLetterInfo = getBatchInfo(batch_type_letter);
    if (batchIdLetterInfo == null) {
      context.getLogger().debug("Batch Info not found.");
      return false;
    }
    //batchSmsId = insertBatchIdLetter(batchIdLetterInfo);

    //batchIdLetterInfo.getLimitPerDay();
    //batchIdLetterInfo.getLimitPerFile();
    //</editor-fold>
    //
    //<editor-fold defaultstate="collapsed" desc="getTemplateInfo">
    //action_id , criteria_id , template_type(sms ,letter) , language_id
    HashMap<BigDecimal, HashMap<BigDecimal, HashMap<String, HashMap<BigDecimal, CLCriteriaTemplate.CriteriaTemplateInfo>>>> templateInfo = getTemplateInfo();
    if (templateInfo == null) {
      return false;
    }
    //</editor-fold>
    //
    //<editor-fold defaultstate="collapsed" desc="getParameterInfo">
    //template_id , template_language_id 
    HashMap<BigDecimal, HashMap<BigDecimal, ArrayList<CLCriteriaTemplate.ParameterTemplate>>> parameterInfo = getParameterInfo();
    if (parameterInfo == null) {
      return false;
    }
    //</editor-fold>
    //
    //<editor-fold defaultstate="collapsed" desc="getSenderInfo">
    //COMPANY_ID_PRODUCT_TYPE_ID
    HashMap<String, CLCriteriaTemplate.CLSenderInfo> senderInfo = getSenderInfo();
    if (senderInfo == null) {
      return false;
    }
    //</editor-fold>
    //
    //<editor-fold defaultstate="collapsed" desc="getPathActionInfo">
    //COLLECTION_PATH_ID
    HashMap<BigDecimal, CLAction.ActionDetail> pathActionInfo = getPathActionInfo();
    if (pathActionInfo == null) {
      return false;
    }
    //</editor-fold>
    // 
    //<editor-fold defaultstate="collapsed" desc="Get Company Info">
    HashMap<BigDecimal, PMCompany.PMCompanyInfo> companyInfo = null;
    //</editor-fold>
    //
    //<editor-fold defaultstate="collapsed" desc="Get Language Info">
    HashMap<BigDecimal, CLLanguage.CLLanguagsInfo> languageInfo = null;
    //</editor-fold>
    //

    CLTempTreatment tempTable = new CLTempTreatment(context.getLogger());
    try {
      tempTable.buildConnection();
      // check company_id 
      CLTempTreatment.ExecuteResponse prepareResult = tempTable.prepareDataTreatment(listActionId);
      switch (prepareResult.getStatusCode()) {
        case CLTempTreatment.ExecuteResponse.STATUS_COMPLETE:
        case CLTempTreatment.ExecuteResponse.STATUS_DATA_NOT_FOUND: {
          break;
        }
        default: {
          return false;
        }
      }

      HashMap<String, LettterGroup> data = new HashMap<>();
      String assingId = "";

      while (true) {

        boolean nextRound = true;
        CLTempTreatment.TempTreatmentResponse tblLetter = tempTable.getListTempTreatment(System.nanoTime());
        switch (tblLetter.getStatusCode()) {
          case CLTempTreatment.TempTreatmentResponse.STATUS_COMPLETE: {
            ExecutorService executor1 = Executors.newFixedThreadPool(1000);
            ArrayList<ArrayList<CLTempTreatment.TempTreatment>> listBaInfo = tblLetter.getResponse();
            /*
            for (int i = 0; i < listBaInfo.size(); i++) {
              executor1.execute(new WorkerSendLetter0(context, batchSmsId, batchEmailId, templateInfo, senderInfo, pathActionInfo, listBaInfo.get(i), parameterInfo, companyInfo, languageInfo));
            }
             */
            ArrayList<WorkerSendLetter0> list = new ArrayList<>();
            for (int i = 0; i < listBaInfo.size(); i++) {
              list.add(new WorkerSendLetter0(context, assingId, templateInfo, senderInfo, pathActionInfo, listBaInfo.get(i), parameterInfo, companyInfo, languageInfo));
            }
            for (int i = 0; i < list.size(); i++) {
              executor1.execute(list.get(i));
            }

            executor1.shutdown();
            while (!executor1.isTerminated()) {
              try {
                Thread.sleep(1000L);
              } catch (InterruptedException ex) {
              }
            }

            //template_id 
            for (int i = 0; i < list.size(); i++) {
              WorkerSendLetter0.ObjectLetter temp = list.get(i).getObjectLetter();

              String key = temp.getClMessage().getTemplateId().toPlainString() + "_" + temp.getLanguageId().toPlainString() + "_" + temp.getLanguage().getCode();
              LettterGroup letter = data.get(key);
              if (letter == null) {
                letter = new LettterGroup();
                data.put(key, letter);
              }
              letter.letterList.add(temp);
              letter.number += temp.getListClLetter().size();
            }
            ///insertLetterInformation(data, batchIdLetterInfo);

            break;
          }
          case CLTempTreatment.TempTreatmentResponse.STATUS_DATA_NOT_FOUND: {
            nextRound = false;
            break;
          }
          default: {
            break;
          }
        }

        if (!nextRound) {
          break;
        }
      }
      insertLetterInformation(data, batchIdLetterInfo);
    } finally {
      tempTable.getDBConnection().commit();
      tempTable.getDBConnection().setAutoCommit();
      tempTable.getDBConnection().close();
    }

    return true;
  }

  private boolean insertLetterInformation(HashMap<String, LettterGroup> data, CLBatch.CLBatchVersionInfo batchIdLetterInfo) {

    Iterator<LettterGroup> letterList = data.values().iterator();

    while (letterList.hasNext()) {
      LettterGroup letter = letterList.next();
      if (letter.number >= batchIdLetterInfo.getLimitPerFile().intValue()) {
        //insert batchid
        //create file 
        String fileName = "";
        BigDecimal batchId = insertBatchIdLetter(batchIdLetterInfo, fileName);
        CLLetterTreatment tblLetter = new CLLetterTreatment(context.getLogger());
        tblLetter.buildConnection();

        for (int i = 0; i < batchIdLetterInfo.getLimitPerFile().intValue(); i++) {
          //write line 
          WorkerSendLetter0.ObjectLetter oo = letter.letterList.get(i);
          CLLetterTreatment.ExecuteResponse clmessage = tblLetter.insertCLMessage(oo.getClMessage());
          BigDecimal messageId = clmessage.getIdentity();

          for (int k = 0; k < oo.getListTreatmentId().size(); k++) {
            CLLetterTreatment.CLMessageTreatment clMessageTreatment = oo.getListTreatmentId().get(k);
            clMessageTreatment.setMessageId(messageId);
            tblLetter.insertCLMessageTreatment(clMessageTreatment);
          }
          for (int k = 0; k < oo.getListClLetter().size(); k++) {
            CLLetterTreatment.CLLetter clLetter = oo.getListClLetter().get(k);
            clLetter.setMessageId(messageId);
            tblLetter.insertCLLetter(clLetter);
          }
        }
        tblLetter.getDBConnection().close();
      }
    }

    return true;
  }

//  private CLBatch.CLBatchVersionInfo getBatchIdLetter() {
//    CLBatch clBatch = new CLBatch(context.getLogger());
//    CLBatch.GetCLBatchVersionResponse letterBatchId = clBatch.getCLBatchVersion(batch_type_letter);
//    switch (letterBatchId.getStatusCode()) {
//      case CLBatch.GetCLBatchVersionResponse.STATUS_COMPLETE: {
//        return letterBatchId.getResponse();
//      }
//      default: {
//        return null;
//      }
//    }
//  }
  private BigDecimal insertBatchIdLetter(CLBatch.CLBatchVersionInfo batchInfo, String fileName) {
    CLBatch clBatch = new CLBatch(context.getLogger());
    Date current = new Date();
    CLBatch.CLBatcInfo clBatchInfo = clBatch.buildCLBatcInfo();
    clBatchInfo.setBatchTypeId(batch_type_letter);
    clBatchInfo.setBatchVersionNo(batchInfo.getBatchVersionNo());
    clBatchInfo.setBatchStartDtm(current);
    clBatchInfo.setBatchEndDtm(null);
    clBatchInfo.setBatchFileName("");
    clBatchInfo.setResponseFileName(null);
    clBatchInfo.setOutboundStatus(Constants.OutboundStatus.Generating);
    clBatchInfo.setOutboundStatusDtm(current);
    clBatchInfo.setInboundStatus(Constants.InboundStatus.Pending);
    clBatchInfo.setOutboundStatusDtm(current);
    clBatchInfo.setCreated(current);
    clBatchInfo.setCreatedBy("system");
    clBatchInfo.setLastUpd(current);
    clBatchInfo.setLastUpdBy("system");
    CLBatch.ExecuteResponse clBatchResp = clBatch.insertCLBatch(clBatchInfo);
    switch (clBatchResp.getStatusCode()) {
      case CLBatch.ExecuteResponse.STATUS_COMPLETE: {
        return clBatchResp.getIdentity();
      }
      default: {
        return null;
      }
    }
  }

  private CLBatch.CLBatchVersionInfo getBatchIdEmail() {
    CLBatch clBatch = new CLBatch(context.getLogger());
    CLBatch.GetCLBatchVersionResponse smsBatchId = clBatch.getCLBatchVersion(batch_type_letter_email);
    switch (smsBatchId.getStatusCode()) {
      case CLBatch.GetCLBatchVersionResponse.STATUS_COMPLETE: {
        return smsBatchId.getResponse();
      }
      default: {
        return null;
      }
    }
  }

  private BigDecimal insertBatchIdEmail(CLBatch.CLBatchVersionInfo batchInfo) {
    CLBatch clBatch = new CLBatch(context.getLogger());
    Date current = new Date();
    CLBatch.CLBatcInfo clBatchInfo = clBatch.buildCLBatcInfo();
    clBatchInfo.setBatchTypeId(batch_type_letter_email);
    clBatchInfo.setBatchVersionNo(batchInfo.getBatchVersionNo());
    clBatchInfo.setBatchStartDtm(current);
    clBatchInfo.setOutboundStatus(Constants.OutboundStatus.NoOutboundResponse);
    clBatchInfo.setOutboundStatusDtm(current);
    clBatchInfo.setInboundStatus(Constants.InboundStatus.NoInboundResponse);
    clBatchInfo.setOutboundStatusDtm(current);
    clBatchInfo.setCreated(current);
    clBatchInfo.setCreatedBy("system");
    clBatchInfo.setLastUpd(current);
    clBatchInfo.setLastUpdBy("system");

    CLBatch.ExecuteResponse clBatchResp = clBatch.insertCLBatch(clBatchInfo);
    switch (clBatchResp.getStatusCode()) {
      case CLBatch.ExecuteResponse.STATUS_COMPLETE: {
        return clBatchResp.getIdentity();
      }
      default: {
        return null;
      }
    }
  }

  private HashMap<BigDecimal, HashMap<BigDecimal, HashMap<String, HashMap<BigDecimal, CLCriteriaTemplate.CriteriaTemplateInfo>>>> getTemplateInfo() {
    CLCriteriaTemplate criteriaTemplate = new CLCriteriaTemplate(context.getLogger());
    CLCriteriaTemplate.CriteriaTemplateInfoResponse criteriaId = criteriaTemplate.getCriteriaTemplateInfo(listActionId);
    switch (criteriaId.getStatusCode()) {
      case CLCriteriaTemplate.CriteriaTemplateInfoResponse.STATUS_COMPLETE: {
        return criteriaId.getResponse();
      }
      case CLCriteriaTemplate.CriteriaTemplateInfoResponse.STATUS_DATA_NOT_FOUND: {
        return null;
      }
      default: {
        return null;
      }
    }
  }

  private HashMap<BigDecimal, HashMap<BigDecimal, ArrayList<CLCriteriaTemplate.ParameterTemplate>>> getParameterInfo() {
    CLCriteriaTemplate criteriaTemplate = new CLCriteriaTemplate(context.getLogger());
    CLCriteriaTemplate.ParameterSMSResponse tempateParameter = criteriaTemplate.getListParameter(listActionId);
    switch (tempateParameter.getStatusCode()) {
      case CLCriteriaTemplate.ParameterSMSResponse.STATUS_COMPLETE: {
        return tempateParameter.getResponse();
      }
      case CLCriteriaTemplate.ParameterSMSResponse.STATUS_DATA_NOT_FOUND: {
        return null;
      }
      default: {
        return null;
      }
    }
  }

  private HashMap<String, CLCriteriaTemplate.CLSenderInfo> getSenderInfo() {
    CLCriteriaTemplate criteriaTemplate = new CLCriteriaTemplate(context.getLogger());
    CLCriteriaTemplate.CLSenderResponse sender = criteriaTemplate.getCLSenderInfo();
    switch (sender.getStatusCode()) {
      case CLCriteriaTemplate.CLSenderResponse.STATUS_COMPLETE: {
        return sender.getResponse();
      }
      case CLCriteriaTemplate.CLSenderResponse.STATUS_DATA_NOT_FOUND: {
        return null;
      }
      default: {
        return null;
      }
    }
  }

  private HashMap<BigDecimal, CLAction.ActionDetail> getPathActionInfo() {
    CLAction pathAction = new CLAction(context.getLogger());
    CLAction.ActionDetailResponse pathActionInfo = pathAction.queryActionDetail();
    switch (pathActionInfo.getStatusCode()) {
      case CLAction.ActionDetailResponse.STATUS_COMPLETE: {
        return pathActionInfo.getResponse();
      }
      case CLAction.ActionDetailResponse.STATUS_DATA_NOT_FOUND: {
        return new HashMap<>();
      }
      default: {
        return null;
      }
    }
  }

  public static void main(String[] args) {
    new LetterTreatment0(args).execute();
  }

  private class LettterGroup {

    long number = 0;
    ArrayList<WorkerSendLetter0.ObjectLetter> letterList = new ArrayList<>();
  }

}
